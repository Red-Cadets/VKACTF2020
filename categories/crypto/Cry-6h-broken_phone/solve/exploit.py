from pwn import *
import json
import re
from Crypto.Util.number import *

sock = remote('ip', 42000)
time.sleep(1)

recv = sock.recv()
p = int(re.findall(rb"p': '0x([0-9a-f]+)'", recv)[0], 16)
g = int(re.findall(rb"g': '0x([0-9a-f]+)'", recv)[0], 16)
A = int(re.findall(rb"A': '0x([0-9a-f]+)'", recv)[0], 16)
B = int(re.findall(rb"B': '0x([0-9a-f]+)'", recv)[0], 16)
iv = re.findall(rb"iv': '([0-9a-f]+)'", recv)[0].decode()
enc = re.findall(rb"enc': '([0-9a-f]+)'", recv)[0].decode()

print("p =", p)
print("g =", g)
print("A =", A)
print("B =", B)
print("iv =", iv)
print("enc =", enc)

#_____________________________________________________________________

p2 = math.factorial(320) + 1

sock.sendline(str(p2))
sock.recv()
sock.recv()
sock.sendline(str(g))
sock.recv()
sock.recv()
sock.sendline(str(A))
sock.recv()

recv = sock.recv()
B = int(re.findall(rb"B': '0x([0-9a-f]+)'", recv)[0], 16)
print("B =", B)

#_____________________________________________________________________
"""
sage
d = Mod(g, p)
b = discrete_log(B, d)
"""

b = 25717375813178609576274923746351742435178382006368157350010312716323234362012936819698113739732130471052761248006552241486305354746075617426457403813663074154701766757522370763137297763193101818570045317018344514497153257079281136560308469655889190809277873647918309080760141251068513788394490373113762904095258090359591350801071127322006239225043454674559293590404502915146186348178664541869814958843774662621684579943967040353079964068143014057576113552247499
secret = pow(A, b, p)

#_____________________________________________________________________
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import hashlib

def is_pkcs7_padded(message):
    padding = message[-message[-1]:]
    return all(padding[i] == len(padding) for i in range(0, len(padding)))

def decrypt_flag(secret, iv, ciphertext):
    key = hashlib.sha256(str(secret).encode('ascii')).digest()[:16]
    ciphertext = bytes.fromhex(ciphertext)
    iv = bytes.fromhex(iv)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = cipher.decrypt(ciphertext)
    if is_pkcs7_padded(plaintext):
        return unpad(plaintext, 16).decode('ascii')
    else:
        return plaintext.decode('ascii')

print(decrypt_flag(secret, iv, enc))
